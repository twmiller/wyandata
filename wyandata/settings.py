"""
Django settings for wyandata project.

Generated by 'django-admin startproject' using Django 5.2.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""

from pathlib import Path
import os

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-r98%$b+^l+glfd59__kh*k@ea**+39(vl%g#$3bcfkihm(uy6u'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = ['127.0.0.1', 'localhost', '192.168.0.0/16', '*']


# Application definition

# Add installed apps
INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    
    # Third-party apps
    'rest_framework',
    'channels',
    'corsheaders',
    'django_crontab',
    
    # Local apps
    'api.apps.ApiConfig',  # Use the full path to include the AppConfig
    'dashboard',
    'weather',
    'solar',
    'system',
    'books',  # Add the books app
]

# Channel settings
ASGI_APPLICATION = 'wyandata.asgi.application'
CHANNEL_LAYERS = {
    'default': {
        'BACKEND': 'channels.layers.InMemoryChannelLayer',
    },
}

# REST Framework settings - adjusted for intranet use
REST_FRAMEWORK = {
    'DEFAULT_PERMISSION_CLASSES': [
        'rest_framework.permissions.AllowAny',  # Changed from IsAuthenticated for intranet use
    ],
    'DEFAULT_AUTHENTICATION_CLASSES': [
        'rest_framework.authentication.SessionAuthentication',
        'rest_framework.authentication.BasicAuthentication',
    ],
}

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'corsheaders.middleware.CorsMiddleware',  # Add CORS middleware before CommonMiddleware
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'weather.middleware.CloseOldConnectionsMiddleware',  # Weather middleware
    'solar.middleware.CloseOldConnectionsMiddleware',    # Solar middleware
    'system.middleware.CloseOldConnectionsMiddleware',   # System middleware
]

ROOT_URLCONF = 'wyandata.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'wyandata.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.2/ref/settings/#databases

# Database configuration with PostgreSQL and improved connection handling
DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.postgresql',
        'NAME': 'wyandata',
        'USER': 'wyanuser',
        'PASSWORD': 'm1st3r_pl0ppy',        
        'HOST': 'localhost',
        'PORT': '5432',
        'CONN_MAX_AGE': 60,  # Reduced from 600 to 60 seconds
        'OPTIONS': {
            'connect_timeout': 10,
        },
        'ATOMIC_REQUESTS': False,
        'AUTOCOMMIT': True,
        'CONN_HEALTH_CHECKS': True,  # Added for Django 4.2+
    }
}

# Database connection handling for asynchronous environment
DATABASES_ASYNC_SUPPORT = True

# Password validation
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

# Set time zone to Mountain Time
TIME_ZONE = 'America/Denver'

# Disable timezone support if all your timestamps are already in local time
USE_TZ = False

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.2/howto/static-files/
STATIC_URL = 'static/'

# Define STATIC_ROOT for collecting static files
STATIC_ROOT = BASE_DIR / 'staticfiles'

# Additional locations of static files
STATICFILES_DIRS = [
    BASE_DIR / 'static',
]

# Default primary key field type
# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# CORS settings - updated to allow all origins for intranet use
CORS_ALLOW_ALL_ORIGINS = True  # Allow requests from any origin
CORS_ALLOW_CREDENTIALS = True
CORS_ALLOW_METHODS = [
    'DELETE',
    'GET',
    'OPTIONS',
    'PATCH',
    'POST',
    'PUT',
]
CORS_ALLOW_HEADERS = [
    'accept',
    'accept-encoding',
    'authorization',
    'content-type',
    'dnt',
    'origin',
    'user-agent',
    'x-csrftoken',
    'x-requested-with',
]

# Define cron jobs for automatic data cleanup and aggregation
CRONJOBS = [
    # Run solar data aggregation at 1:00 AM every day
    ('0 1 * * *', 'solar.tasks.run_daily_aggregation'),
    
    # Run solar data cleanup at 2:00 AM every day (keep 7 days of data)
    # This runs AFTER aggregation to ensure data is preserved
    ('0 2 * * *', 'solar.tasks.cleanup_old_solar_data', [7]),
    
    # Run system metrics cleanup every 2 hours (keep only 6 hours of metrics data)
    ('0 */2 * * *', 'system.tasks.cleanup_old_system_metrics', [6]),
    
    # Generate weather summaries at 12:05 AM every day
    ('5 0 * * *', 'django.core.management.call_command', ['generate_weather_summaries']),
    
    # Clean up old weather data at 3:15 AM every day (keep 7 days of raw data)
    ('15 3 * * *', 'django.core.management.call_command', ['cleanup_weather_data']),
]

# Logging configuration
LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'formatters': {
        'verbose': {
            'format': '{asctime} - {levelname} - {name} - {message}',
            'style': '{',
        },
        'simple': {
            'format': '{levelname} {message}',
            'style': '{',
        },
    },
    'handlers': {
        'console': {
            'class': 'logging.StreamHandler',
            'formatter': 'verbose',
        },
        'file': {
            'class': 'logging.handlers.RotatingFileHandler',
            'filename': BASE_DIR / 'logs' / 'wyandata.log',
            'maxBytes': 10485760,  # 10 MB
            'backupCount': 5,
            'formatter': 'verbose',
        },
    },
    'loggers': {
        'django': {
            'handlers': ['console', 'file'],
            'level': 'INFO',
            'propagate': True,
        },
        'system': {
            'handlers': ['console', 'file'],
            'level': 'INFO',
            'propagate': False,
        },
        'solar': {
            'handlers': ['console', 'file'],
            'level': 'INFO',
            'propagate': False,
        },
        'weather': {
            'handlers': ['console', 'file'],
            'level': 'INFO',
            'propagate': False,
        },
    },
}

# Create logs directory if it doesn't exist
os.makedirs(BASE_DIR / 'logs', exist_ok=True)
